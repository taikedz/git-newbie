#!/bin/bash

##bash-libs: runmain.sh @ 2db5a12b

### runmain SCRIPTNAME FUNCTION [ARGUMENTS ...] Usage:bbuild
#
# Runs the function FUNCTION with ARGUMENTS, only if the runtime
# name of the script matches SCRIPTNAME
#
# This allows you include a main-like function in your library
# that only runs if you use your lib as an executabl itself.
#
# For example, an image archiver could be:
#
# 	function archive_images {
# 		tar czf "$1.tgz" "$@"
# 	}
#
# 	runmain archiveimages.sh archive_images "$@"
#
# When included a different script, the runmain call does not fire the lib's function
#
# If the lib is compiled/made executable, and named "archiveimages.sh", the function runs.
#
# This is similar to `if __name__ == "__main__"` clauses in python
#
###/doc

function runmain {
	local required_name="$1"; shift || :
	local funcall="$1"; shift || :
	local scriptname="$(basename "$0")"

	if [[ "$required_name" = "$scriptname" ]]; then
		"$funcall" "$@"
	fi
}

### Git Newbie Usage:help
#
# The `gitn` tool offers git users shortcuts for some of the most common operations, as well as some additional features.
#
# USAGE
# -----
#
#	gitn FILES ... [--historic]
#
# Show the diff of files that have not yet been staged for commit, or show the last changes to the file
#
# ++
#
#	gitn FILES ... -m [COMMIT MESSAGE]
#
# Add and commit the files with the specified commit message
#
# ++
#
# 	gitn -s [ [REMOTE] BRANCH]
#	gitn -s --tags
#
# Push to the specified or inferred branch and remote. If no remote is specified, then the first remote in `git remote -v` is used, or the one in $GSETTING_remote if set. See SETTINGS.
#
#  If --tags is specified, will push tags instead of commits
#
# ++
#
# 	gitn -l [ [REMOTE] BRANCH ]
#
# Pull from specified or inferred branch and remote. If no remote is specified, then the first remote in `git remote -v` is used, or the one in $GSETTING_remote if set. See SETTINGS.
#
# ++
#
# 	gitn -b
# 	gitn BRANCH
# 	gitn -b BRANCH --delete [--force]
#
# List branches or switch to specified branch.
#
# If there are uncommitted changes and you try to switch, gitn will stash your changes, switch, and stash pop your changes.
#
# If --delete is specified, deletes the branch. Use --force to force the deletion of a branch not fully merged to its upstream.
#
# ++
#
# 	gitn -update BRANCH
#
# Write the current commit state to the named branch. If the branch does not exist, it is created.
#
# ++
#
# 	gitn -merge BRANCH
#
# Pulls the changes from the named branch to the current branch.
#
# ++
#
# 	gitn -tags [TAGNAME [MESSAGE ...]]
#
# Create a new tag, optionally with a message
#
# ++
# 
# 	git -t [REMOTE [URLPAT]]
#
# List remotes, list URLs of a specified remote, or set the URL of a remote.
#
# If URLPAT starts with 's/' then it is treated as a sed substitution pattern for re-writing the URL
#
# ++
#
# 	gitn -blame FILES ...
#
# See git blame for each file
#
###/doc

### SETTINGS Usage:help
#
# A settings file `./.gitn` can be used to pre-populate settings
#
# GSETTING_warnmaster
# 	default: true
# 	Displays a warning when committing on master
#
# GSETTING_remote
# 	default: (not set)
# 	The default remote to use when none is specified
#
# GSETTING_nofetch
# 	defaut: false
# 	By default, `gitn` will try to fetch info from remote
#
###/doc
##bash-libs: autohelp.sh @ 2db5a12b

### autohelp:print [ SECTION [FILE] ] Usage:bbuild
# Write your help as documentation comments in your script
#
# If you need to output the help from your script, or a file, call the
# `autohelp:print` function and it will print the help documentation
# in the current script to stdout
#
# A help comment looks like this:
#
#	### <title> Usage:help
#	#
#	# <some content>
#	#
#	# end with "###/doc" on its own line (whitespaces before
#	# and after are OK)
#	#
#	###/doc
#
# You can set a different help section by specifying a subsection
#
# 	autohelp:print section2
#
# > This would print a section defined in this way:
#
# 	### Some title Usage:section2
# 	# <some content>
# 	###/doc
#
# You can set a different comment character by setting the 'HELPCHAR' environment variable:
#
# 	HELPCHAR=%
#
###/doc

HELPCHAR='#'

function autohelp:print {
	local SECTION_STRING="${1:-}"; shift || :
	local TARGETFILE="${1:-}"; shift || :
	[[ -n "$SECTION_STRING" ]] || SECTION_STRING=help
	[[ -n "$TARGETFILE" ]] || TARGETFILE="$0"

        echo -e "\n$(basename "$TARGETFILE")\n===\n"
        local SECSTART='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s+(.+?)\s+Usage:'"$SECTION_STRING"'\s*$'
        local SECEND='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s*/doc\s*$'
        local insec=false

        while read secline; do
                if [[ "$secline" =~ $SECSTART ]]; then
                        insec=true
                        echo -e "\n${BASH_REMATCH[1]}\n---\n"

                elif [[ "$insec" = true ]]; then
                        if [[ "$secline" =~ $SECEND ]]; then
                                insec=false
                        else
				echo "$secline" | sed -r "s/^\s*$HELPCHAR//g"
                        fi
                fi
        done < "$TARGETFILE"

        if [[ "$insec" = true ]]; then
                echo "WARNING: Non-terminated help block." 1>&2
        fi
	echo ""
}

### autohelp:paged Usage:bbuild
#
# Display the help in the pager defined in the PAGER environment variable
#
###/doc
function autohelp:paged {
	: ${PAGER=less}
	autohelp:print "$@" | $PAGER
}

### autohelp:check Usage:bbuild
#
# Automatically print help and exit if "--help" is detected in arguments
#
# Example use:
#
#	#!/bin/bash
#
#	### Some help Usage:help
#	#
#	# Some help text
#	#
#	###/doc
#
#	#%include autohelp.sh
#
#	main() {
#		autohelp:check "$@"
#
#		# now add your code
#	}
#
#	main "$@"
#
###/doc
autohelp:check() {
	if [[ "$*" =~ --help ]]; then
		cols="$(tput cols)"
		autohelp:print | fold -w "$cols" -s || autohelp:print
		exit 0
	fi
}
##bash-libs: ensureline.sh @ 2db5a12b

### ensureline Usage:bbuild
#
# Utility for manipulating config files (and other files where all similar lines need to match).
#
#	ensureline FILE PATTERN LINEDATA
#
# Ensure that **every** line in FILE matched by PATTERN becomes LINEDATA
#
# If no such line is found, LINEDATA is appended to the end of the file.
#
# For example
#
# 	ensureline /etc/ssh/sshd_config '#?PasswordAuthentication.*' "PasswordAuthentication no"
#
# Ensure that the PasswordAuthentication line, whether commented out or not,
# becomes an uncomented "PasswordAuthentication no", or add it to the end of the file.
#
# The match applies to the full line; the pattern '#?PasswordAuth' on its own would not match, due to the missing characters.
#
###/doc

function ensureline {
	local file="$1"; shift || :
	local pattern="$1"; shift || :

	if grep -P "^$pattern$" "$file" -q ; then
		ensureline:matches "$file" "$pattern" "$@"
	else
		ensureline:add "$file" "$pattern" "$@"
	fi
}

# The following functions are internal, and should not be used.
# Use the main `ensureline` instead

function ensureline:matches {
	local FILE="$1"; shift || :
	local PATTERN="$1"; shift || :
	local LINEDATA="$1"; shift || :

	#TODO - add support to specify a start line, and a range?

	sed -r "s^$PATTERN$$LINEDATA" -i "$FILE"
}

function ensureline:add {
	local FILE="$1"; shift || :
	local PATTERN="$1"; shift || :
	local LINEDATA="$1"; shift || :

	echo "$LINEDATA" >> "$FILE"
}

### gitcall Usage:gitn-api
#
# Call git, and printout what we're actually doing
#
###/doc
function gitcall {
	out:break "git $@"
	git "$@"
}
function gitn_choose_branch {
	askuser:choose "Which branch" "$(git branch --list 2>&1|sed -r 's/^..//')"
}

### git_getRemote and git_getBranch Usage:bbuild
#
# We are making the REMOTE optional, hence the slightly confusing implementation
#
# 	git command BRANCH
# 	git command REMOTE BRANCH
#
###

function gitn_getRemote {
	out:break "get remote $*"

	if [[ -z "${2:-}" ]]; then
		# git command BRANCH
		if [[ -z "${GSETTING_remote:-}" ]]; then
			export GSETTING_remote="$(git remote | grep -P '^origin\b')"

			if [[ -z "${GSETTING_remote:-}" ]]; then
				out:warn "No remote 'origin' - using first remote. Set GSETTING_remote to override"
				export GSETTING_remote="$(git remote|head -n 1)"
			fi
		fi

		out:info "Using remote '$GSETTING_remote'"
		echo "$GSETTING_remote"
	else
		# git command REMOTE BRANCH
		echo "$1"
	fi
}

function gitn_getBranch {
	out:break "get branch $*"

	if [[ -z "${1:-}" ]]; then
		git branch --list|egrep '^\*'|cut -d' ' -f2
	else
		if [[ -z "${2:-}" ]]; then
			out:break "return 1 $1"
			# git command BRANCH
			echo "$1"
		else
			out:break "return 2 $2"
			# git command REMOTE BRANCH
			echo "$2"
		fi
	fi
}
function gitn_last_commit {
	git log | grep ^commit|head -n 1|cut -d' ' -f2
}
function args_processargs {
	# This section is unfortunately ugly
	#
	# anything that can be done to clean up?
	
	if [[ -n "${GITARGS_action:-}" ]]; then
		return
	fi

	local action_default=status

	local l_GITARGS_files
	local l_GITARGS_allfiles
	GITARGS_action="$action_default"
	local l_GITARGS_arguments

	for token in "$@"; do
		if [[ "${token:0:1}" = '-' ]]; then
			if [[ "${token:1:1}" = '-' ]]; then
				arguments_dosetting "$token"
			else
				GITARGS_action="$(args_getActionFor "$token")"
			fi

		else
			if [[ "$GITARGS_action" = "$action_default" ]] ||
			   [[ "$GITARGS_action" = diff ]]; then
				l_GITARGS_files[${#l_GITARGS_files[@]}]="$token"
				l_GITARGS_allfiles[${#l_GITARGS_allfiles[@]}]="$token"
				GITARGS_action=diff

			else
				l_GITARGS_arguments[${#l_GITARGS_arguments[@]}]="$token"
				l_GITARGS_allfiles[${#l_GITARGS_allfiles[@]}]="$token"
			fi
		fi

	done

	GITARGS_files=("${l_GITARGS_files[@]}")
	GITARGS_allfiles=("${l_GITARGS_allfiles[@]}")
	GITARGS_arguments=("${l_GITARGS_arguments[@]}")
}

function arguments_dosetting {
	case "$1" in
	--tags)
		export GSETTING_withtags=true ;;

	--no-fetch|--nf)
		export GSETTING_nofetch=true ;;

	--historic)
		export GSETTING_histdiff=true ;;

	--delete)
		export GSETTING_delbranch=true ;;

	--force)
		export GSETTING_force=true ;;

	--no-warn-master)
		export GSETTING_warnmaster=false ;;

	--debug)
		: ;;
	*)
		out:fail "Unknown setting '$1'" ;;
	esac
}

function args_getActionFor {
	case "$1" in
		-update)
			# merge to
			echo "update" ;;

		-merge)
			# merge from
			echo "merge" ;;

		-m|-commit)
			echo "commit" ;;

		-l|-pull)
			echo "pull" ;;

		-s|-push)
			echo "push" ;;

		-b|-branch)
			echo "branch" ;;

		-c|-checkout)
			echo "checkout" ;;

		-g|-log)
			echo "log" ;;

		-blame)
			echo "blame" ;;

		-r|-remote)
			echo "remote" ;;

		-stash)
			echo "stash" ;;

		-tags)
			echo "tag" ;;

		-release)
			echo "release" ;;

		-patch)
			echo "patch" ;;

		-gh)
			echo "github_create" ;;

		-sub)
			echo "submodule" ;;

		*)
			out:fail "Action $1 unknown"
			;;
	esac
}
GSETTING_gitnfile=.gitn

function settings_initialize {
	: ${GSETTING_warnmaster=true}

	: ${GSETTING_withtags=false}
	: ${GSETTING_nofetch=false}
	: ${GSETTING_histdiff=false}
	: ${GSETTING_delbranch=false}
	: ${GSETTING_force=false}
}

function settings_load {
	local settingsfile="$(find_settings)"
	[[ -n "$settingsfile" ]] && . "$settingsfile" || :

	settings_initialize
}

function find_settings {
	if [[ -f "$GSETTING_gitnfile" ]]; then
		echo "$PWD/$GSETTING_gitnfile"

	elif [[ -d .git ]] || [[ "$PWD" = / ]]; then
		# We only want to load settings for the current git project
		return

	else
		# Use a subshell to avoid changing the working directory at main level
		(
		cd ..
		find_settings
		)
	fi
}
##bash-libs: out.sh @ 2db5a12b

##bash-libs: colours.sh @ 2db5a12b

### Colours for bash Usage:bbuild
# A series of colour flags for use in outputs.
#
# Example:
# 	
# 	echo -e "${CRED}Some red text ${CBBLU} some blue text $CDEF some text in the terminal's default colour")
#
# Requires processing of escape characters.
#
# Colours available:
#
# CRED, CBRED, HLRED -- red, bold red, highlight red
# CGRN, CBGRN, HLGRN -- green, bold green, highlight green
# CYEL, CBYEL, HLYEL -- yellow, bold yellow, highlight yellow
# CBLU, CBBLU, HLBLU -- blue, bold blue, highlight blue
# CPUR, CBPUR, HLPUR -- purple, bold purple, highlight purple
# CTEA, CBTEA, HLTEA -- teal, bold teal, highlight teal
#
# CDEF -- switches to the terminal default
# CUNL -- add underline
#
# Note that highlight and underline must be applied or re-applied after specifying a colour.
#
###/doc

export CRED=$(echo -e "\033[0;31m")
export CGRN=$(echo -e "\033[0;32m")
export CYEL=$(echo -e "\033[0;33m")
export CBLU=$(echo -e "\033[0;34m")
export CPUR=$(echo -e "\033[0;35m")
export CTEA=$(echo -e "\033[0;36m")

export CBRED=$(echo -e "\033[1;31m")
export CBGRN=$(echo -e "\033[1;32m")
export CBYEL=$(echo -e "\033[1;33m")
export CBBLU=$(echo -e "\033[1;34m")
export CBPUR=$(echo -e "\033[1;35m")
export CBTEA=$(echo -e "\033[1;36m")

export HLRED=$(echo -e "\033[41m")
export HLGRN=$(echo -e "\033[42m")
export HLYEL=$(echo -e "\033[43m")
export HLBLU=$(echo -e "\033[44m")
export HLPUR=$(echo -e "\033[45m")
export HLTEA=$(echo -e "\033[46m")

export CDEF=$(echo -e "\033[0m")

### Console output handlers Usage:bbuild
#
# Write data to console stderr using colouring
#
###/doc

### Environment Variables Usage:bbuild
#
# MODE_DEBUG : set to 'true' to enable debugging output
# MODE_DEBUG_VERBOSE : set to 'true' to enable command echoing
#
###/doc

: ${MODE_DEBUG=false}
: ${MODE_DEBUG_VERBOSE=false}

# Internal
function out:buffer_initialize {
	OUTPUT_BUFFER_defer=(:)
}
out:buffer_initialize

### out:debug MESSAGE Usage:bbuild
# print a blue debug message to stderr
# only prints if MODE_DEBUG is set to "true"
###/doc
function out:debug {
	if [[ "$MODE_DEBUG" = true ]]; then
		echo "${CBBLU}DEBUG: $CBLU$*$CDEF" 1>&2
	fi
}

### out:debug:fork [MARKER] Usage:bbuild
#
# Pipe the data coming through stdin to stdout
#
# If debug mode is on, *also* write the same data to stderr, each line preceded by MARKER
#
# Insert this debug fork into pipes to see their output
#
###/doc
function out:debug:fork {
	if [[ "$MODE_DEBUG" = true ]]; then
		local MARKER="${1:-DEBUG: }"; shift || :

		cat - | sed -r "s/^/$MARKER/" | tee -a /dev/stderr
	else
		cat -
	fi
}

### out:info MESSAGE Usage:bbuild
# print a green informational message to stderr
###/doc
function out:info {
	echo "$CGRN$*$CDEF" 1>&2
}

### out:warn MESSAGE Usage:bbuild
# print a yellow warning message to stderr
###/doc
function out:warn {
	echo "${CBYEL}WARN: $CYEL$*$CDEF" 1>&2
}

### out:defer MESSAGE Usage:bbuild
# Store a message in the output buffer for later use
###/doc
function out:defer {
	OUTPUT_BUFFER_defer[${#OUTPUT_BUFFER_defer[@]}]="$*"
}

### out:flush HANDLER ... Usage:bbuild
#
# Pass the output buffer to the command defined by HANDLER
# and empty the buffer
#
# Examples:
#
# 	out:flush echo -e
#
# 	out:flush out:warn
#
# (escaped newlines are added in the buffer, so `-e` option is
#  needed to process the escape sequences)
#
###/doc
function out:flush {
	[[ -n "$*" ]] || out:fail "Did not provide a command for buffered output\n\n${OUTPUT_BUFFER_defer[*]}"

	[[ "${#OUTPUT_BUFFER_defer[@]}" -gt 1 ]] || return 0

	for buffer_line in "${OUTPUT_BUFFER_defer[@]:1}"; do
		"$@" "$buffer_line"
	done

	out:buffer_initialize
}

### out:fail [CODE] MESSAGE Usage:bbuild
# print a red failure message to stderr and exit with CODE
# CODE must be a number
# if no code is specified, error code 127 is used
###/doc
function out:fail {
	local ERCODE=127
	local numpat='^[0-9]+$'

	if [[ "$1" =~ $numpat ]]; then
		ERCODE="$1"; shift || :
	fi

	echo "${CBRED}ERROR FAIL: $CRED$*$CDEF" 1>&2
	exit $ERCODE
}

### out:error MESSAGE Usage:bbuild
# print a red error message to stderr
#
# unlike out:fail, does not cause script exit
###/doc
function out:error {
	echo "${CBRED}ERROR: ${CRED}$*$CDEF" 1>&2
}

### out:dump Usage:bbuild
#
# Dump stdin contents to console stderr. Requires debug mode.
#
# Example
#
# 	action_command 2>&1 | out:dump
#
###/doc

function out:dump {
	echo -n "${CBPUR}$*" 1>&2
	echo -n "$CPUR" 1>&2
	cat - 1>&2
	echo -n "$CDEF" 1>&2
}

### out:break MESSAGE Usage:bbuild
#
# Add break points to a script
#
# Requires MODE_DEBUG set to true
#
# When the script runs, the message is printed with a propmt, and execution pauses.
#
# Press return to continue execution.
#
# Type `exit`, `quit` or `stop` to stop the program. If the breakpoint is in a subshell,
#  execution from after the subshell will be resumed.
#
###/doc

function out:break {
	[[ "$MODE_DEBUG" = true ]] || return 0

	echo -en "${CRED}BREAKPOINT: $* >$CDEF " >&2
	read
	if [[ "$REPLY" =~ quit|exit|stop ]]; then
		out:fail "ABORT"
	fi
}

if [[ "$MODE_DEBUG_VERBOSE" = true ]]; then
	set -x
fi

function action_diff {
	for thefile in "${GITARGS_files[@]}"; do
		if [[ "$GSETTING_histdiff" = true ]]; then
			action_diff_historic "$thefile"
		else
			action_diff_staged "$thefile"
		fi
	done
}

function action_diff_historic {
	gitcall log -p "$1"
}

function action_diff_staged {
	gitcall diff "$1" | action_diff_display
}

function action_diff_display {
	sed -r -e 's/^\+(.*)$/[32;1m+\1[0m/' -e 's/^-(.*)$/[31;1m-\1[0m/'|less -R
}
##bash-libs: askuser.sh @ 2db5a12b

### askuser Usage:bbuild
# Present the user with questions on stderr
###/doc


yespat='^(yes|YES|y|Y)$'
numpat='^[0-9]+$'
rangepat='[0-9]+,[0-9]+'
listpat='^[0-9 ]+$'
blankpat='^ *$'

### askuser:confirm Usage:bbuild
# Ask the user to confirm a closed question. Defaults to no
#
# returns 0 on successfully match 'y' or 'yes'
# returns 1 otherwise
###/doc
function askuser:confirm {
	read -p "$* [y/N] > " 1>&2
	if [[ "$REPLY" =~ $yespat ]]; then
		return 0
	else
		return 1
	fi
}

### askuser:ask Usage:bbuild
# Ask the user to provide some text
#
# Echoes out the entered text
###/doc
function askuser:ask {
	read -p "$* : " 1>&2
	echo "$REPLY"
}

### askuser:password Usage:bbuild
# Ask the user to enter a password (does not echo what is typed)
#
# Echoes out the entered text
###/doc
function askuser:password {
	read -s -p "$* : " 1>&2
	echo "$REPLY"
}

### askuser:choose_multi Usage:bbuild
# Allows the user to choose from multiple choices
#
# askuser:chose_multi MESG CHOICESTRING
#
#
# MESG is a single string token that will be displayed as prompt
#
# CHOICESTRING is a comma-separated, or newline separated, or "\\n"-separated token string
#
# Equivalent strings include:
#
# * `"a\\nb\\nc"` - quoted and explicit newline escapes
# * `"a,b,c"` - quoted and separated with commas
# * `a , b , c` - not quoted, separated by commas
# * `a`, `b` and `c` on their own lines
#
# User input:
#
# User can choose by selecting
#
# * a single item by number
# * a range of numbers (4,7 for range 4 to 7)
# * or a string that matches the pattern
#
# All option lines that match will be returned, one per line
#
# If the user selects nothing, then function returns 1 and an empty stdout
###/doc
function askuser:choose_multi {
	local mesg=$1; shift || :
	local choices=$(echo "$*"|sed -r 's/ *, */\n/g')
	out:debug "CHOICES: $choices"

	out:info "$mesg:" 
	local choicelist="$(echo -e "$choices"|egrep '^' -n| sed 's/:/: /')"
	echo "$choicelist" 1>&2
	
	local sel=$(askuser:ask "Choice")
	if [[ "$sel" =~ $blankpat ]]; then
		return 1

	elif [[ "$sel" =~ $numpat ]] || [[ "$sel" =~ $rangepat ]]; then
		out:debug "Number choice [$sel]"
		echo -e "$choices" | sed -n "$sel p"
	
	elif [[ "$sel" =~ $listpat ]]; then
		echo "$choicelist" | egrep "^${sel// /|}:" | sed -r 's/^[0-9]+: //'

	else
		out:debug "Pattern choice [$sel]"
		echo -e "$choices"  |egrep "$(echo "$sel"|tr " " '|')"
	fi
	return 0
}

### askuser:choose Usage:bbuild
# Ask the user to choose an item
#
# Like askuser:choose_multi, but will loop if the user selects more than one item
#
# If the user provides no entry, returns 1
#
# If the user chooses one item, that item is echoed to stdout
###/doc
function askuser:choose {
	local mesg=$1; shift || :
	while true; do
		local thechoice="$(askuser:choose_multi "$mesg" "$*")"
		local lines=$(echo -n "$thechoice" | grep '$' -c)
		if [[ $lines = 1 ]]; then
			echo "$thechoice"
			return 0
		elif [[ $lines = 0 ]]; then
			return 1
		else
			out:warn "Too many results"
		fi
	done
}

function action_commit {
	gitcall add "${GITARGS_files[@]}"

	if [[ "$GSETTING_warnmaster" = true ]] && [[ "$(gitn_getBranch)" = master ]]; then
		askuser:confirm "${CBYEL}WARNING -- you are on master. Continue ?$CDEF" || out:fail "Abort."
		#askuser:confirm "${CBYEL}WARNING -- you are on master. Continue ?$CDEF" || {
		#	askuser:confirm "Would you like to move changes to another branch ?" && {
		#		action_branch_switchto "$(gitn_choose_branch)" || out:fail "Failed to switch"
		#	} || out:fail Abort
		#}
	fi
	
	if [[ -z "${GITARGS_arguments[*]}" ]]; then
		gitcall commit
	else
		gitcall commit -m "${GITARGS_arguments[*]}"
	fi
}
function action_status {
	# GITARGS_* -- files, arguments
	
	action_fetch

	gitcall status
}
function action_fetch {
	# GITARGS_* -- files, arguments
	
	if [[ "$GSETTING_nofetch" != true ]]; then
		git fetch "$(gitn_getRemote)"
	fi
}
function action_pull {
	# GITARGS_* -- files, arguments
	
	local remote=$(gitn_getRemote "${GITARGS_arguments[@]}")
	local branch=$(gitn_getBranch "${GITARGS_arguments[@]}")

	gitcall pull "$remote" "$branch"
}
function action_push {
	# GITARGS_* -- files, arguments

	if [[ "${GSETTING_withtags}" = "true" ]]; then
		action_push_tags
	else
		action_push_changes
	fi
}

function action_push_changes {
	out:break "$GITARGS_arguments"
	local remote=$(gitn_getRemote "${GITARGS_arguments[@]}")
	local branch=$(gitn_getBranch "${GITARGS_arguments[@]}")

	out:info "Pushing $branch to $remote/$branch"
	gitcall push "$remote" "$branch"
}

function action_push_tags {
	local remote=$(gitn_getRemote "${GITARGS_arguments[@]}")

	gitcall push "$remote" --tags
}
function action_remote_getremote {
	gitcall remote -v|egrep "^$1"
}


function action_remote_setremote {
	local remote="${1:-}"; shift
	local urlpat="${1:-}"; shift
	local urlstart="${urlpat:0:2}"

	if [[ -z "${urlpat:-}" ]]; then
		action_remote_getremote "$remote"
	else
		local remstring="$(action_remote_getremote "$remote"|head -n 1|sed -r 's/\s+/ /'|cut -d' ' -f2)"

		if [[ -z "$remstring" ]]; then
			if [[ "$urlstart" != 's/' ]]; then
				gitcall remote add "$remote" "$urlpat"
			else
				out:fail "Remote $remote is not defined yet."
			fi
		else
			if [[ "$urlstart" = s/ ]]; then
				gitcall remote set-url "$remote" "$(echo "$remstring"|sed -r -e "$urlpat")"
			else
				gitcall remote set-url "$remote" "$urlpat"
			fi
		fi
	fi
}

function action_remote {
	# GITARGS_* -- files, arguments
	
	if [[ -z "${GITARGS_arguments[*]}" ]]; then
		gitcall remote -v
	else
		action_remote_setremote "${GITARGS_arguments[@]}"
	fi
}
function action_branch {
	# GITARGS_* -- files, arguments

	if [[ -z "${GITARGS_arguments[*]}" ]]; then
		gitcall branch --list
	else
		if [[ "$GSETTING_delbranch" = true ]]; then
			action_branch_delete "${GITARGS_arguments[0]}"
		else

			action_branch_switchto "${GITARGS_arguments[0]}"
		fi
	fi
}

function action_branch_hasbranch {
	[[ -n "$(git branch --list|egrep "^..$1$")" ]]
}

function action_branch_delete {
	if action_branch_hasbranch "$1"; then
		local mode="-d"
		if [[ "$GSETTING_force" = true ]]; then
			mode="-D"
		fi
		gitcall branch "$mode" "$1"
	fi
}

function git_repo_is_clean {
	(gitcall status | grep -q 'nothing to commit') && return 0
	return 1
}

function action_branch_switchto {
	local bopt=
	if ! action_branch_hasbranch "$1"; then
		bopt=-b
	fi

	# If clean, don't do undeterministic stash pushing and popping !
	git_repo_is_clean
	local startedclean="$?"

	[[ "$startedclean" -gt 0 ]] && {
		askuser:confirm "There are uncommitted changes. Stash, switch and pop?" || out:fail "Aborted - no changes were made."
	} || :

	[[ "$GSETTING_stashswitch_impede" = true ]] || [[ "$startedclean" -lt 1 ]] || stashpop stash

	gitcall checkout $bopt "$1"
	
	[[ "$GSETTING_stashswitch_impede" = true ]]  || [[ "$startedclean" -lt 1 ]] || stashpop pop
}

function stashpop {
	if [[ "$1" = stash ]]; then
		STASHTEMP="$(mktemp)"
		gitcall stash > "$STASHTEMP"
		out:debug "Stash data : $(cat "$STASHTEMP")"
	elif [[ "$1" = pop ]]; then
		if ! grep -q "No local changes" "$STASHTEMP"; then
			out:debug "Popping stash"
			gitcall stash pop
		fi
	else
		out:fail "Invalid stashpop operation"
	fi
}
function action_merge {
	# GITARGS_* -- files, arguments
	#merge from

	local frombranch="${GITARGS_arguments[0]}"

	if [[ -z "$frombranch" ]]; then out:fail "You need to specify a branch to pull merges from"; fi

	gitcall merge "$frombranch"

}

# "Merge" pulls from another branch to the current branch
# To do update, we need to switch - our original branch is then the "from" branch

function action_update {
	#merge to
	local tobranch="${GITARGS_arguments[0]}"

	if [[ -z "$tobranch" ]]; then out:fail "You need to specify a branch to push merges to."; fi

	local frombranch="$(gitn_getBranch)"
	if [[ -z "$frombranch" ]]; then
		out:fail "Not a git repository"
	fi

	GSETTING_stashswitch_impede=true # Turn off stashing when using switchto

	stashpop stash || out:fail "Could not stash changes"
	action_branch_switchto "$tobranch" || out:fail "Could not switch"

	gitcall merge "$frombranch" || out:fail "Resolve issues"

	action_branch_switchto "$frombranch" || out:fail "Could not return to branch"
	stashpop pop
}
function action_patch {
	# gitn -patch BRANCH [PATCHFILE]
	# this will create a single patch file of the current branch, relative to the remote branch

	# gitn -patch apply PATCHFILE
	# applies patch to current branch
	
	if [[ "${ARGS_arguments[0]}" = apply ]]; then
		action_patchapply "${ARGS_arguments[@]:1}"
	else
		action_patchfor_branch "${ARGS_arguments[@]}"
	fi
}

function action_patch_apply {
	local patchfile="$1"; shift

	if [[ ! -f "$patchfile" ]]; then
		out:fail "No such file $patchfile"
	fi

	gitcall apply --check "$patchfile"

	askuser:confirm "Proceed ?" || out:fail "Aborted"

	gitcall am --signoff < "$patchfile"
}

function action_patch_branch {
	local basebranch="$1"; shift
	local thisbranch="$(gitn_getBranch)"

	local outfile="$1"; shift
	if [[ -z "$outfile" ]]; then
		outfile="$thisbranch.patch"
	fi

	if [[ "$thisbranch" = "$basebranch" ]]; then
		out:fail "You are on $thisbranch and trying to make a patch from $basebranch. You cannot create a patch from the same branch."
	fi

	gitcall format-patch "$basebranch" --stdout > "$outfile"
}
function action_log {
	# GITARGS_* -- files, arguments
	
	if [[ "${#GITARGS_allfiles[@]}" -lt 1 ]]; then
		action_log_general
	else
		action_log_files
	fi
}

function action_log_general {
	gitcall log
}

function action_log_files {
	for thefile in "${GITARGS_allfiles[@]}"; do
		out:info "Log info for $thefile"
		gitcall log "$thefile"
	done
}
function action_blame {
	# GITARGS_* -- files, arguments
	
	for thefile in "${GITARGS_allfiles[@]}"; do
		git blame "$thefile" | less
	done
}
function action_stash {
	# GITARGS_* -- files, arguments
	
	gitcall stash "${GITARGS_arguments[@]}"
}
function action_tag {
	# GITARGS_* -- files, arguments
	
	if [[ "${#GITARGS_arguments[@]}" -gt 0 ]]; then
		action_tag_writetag "${GITARGS_arguments[@]}"
	else
		action_tag_listtags
	fi
}

function action_tag_listtags {
	gitcall tag --list
}

function action_tag_writetag {
	local tagname="$1" ; shift
	local commitmessage="$*"
	gitcall tag "$tagname" -m "$commitmessage"
}
# TODO
# this item should manage a `version.sh` file
# with a major, minor and point number
# versionname should become "{ major | minor | point }"
#  which indicates what part to bump


function action_release {
	# GITARGS_* -- files, arguments

	local versionname="${GITARGS_arguments[0]}"
	local releasemessage="${GITARGS_arguments[@]:1}"

	gitcall tag -m "$releasemessage" "$versionname"

	if [[ -z "$(git status|grep modified:)" ]]; then
		local thisbranch="$(gitn_getBranch)"

		if [[ "$thisbranch" = master ]]; then
			return
		fi

		action_branch_switchto master
		gitcall merge "$thisbranch"
		action_branch_switchto "$thisbranch"
	fi
}
##bash-libs: bincheck.sh @ 2db5a12b

### bincheck:get COMMANDS ... Usage:bbuild
#
# Return the first existing binary
#
# Useful for finding an appropriate binary when you know
# different systems may supply binaries under different names.
#
# Returns the full path from `which` for the first executable
# encountered.
#
# Example:
#
# 	bincheck:get markdown_py markdown ./mymarkdown
#
# Tries in turn to get a `markdown_py`, then a `markdown`, and then a local `./mymarkdown`
#
###/doc

bincheck:get() {
	local BINEXE=
	for binname in "$@"; do
		# Some implementations of `which` print error messages
		# Not useful here.
		BINEXE=$(which "$binname" 2>/dev/null)

		if [[ -n "$BINEXE" ]]; then
			echo "$BINEXE"
			return 0
		fi
	done
	return 1
}

### bincheck:has NAMES ... Usage:bbuild
#
# Determine if at least one of the binaries listed is present and installed on the system
#
###/doc

bincheck:has() {
	[[ -n "$(bincheck:get "$@")" ]]
}

### bincheck:path NAME Usage:bbuild
#
# Determine the actual path to the command
#
# Relative paths are not expanded.
#
###/doc

bincheck:path() {
	local binname="$1"; shift || :

	[[ "$binname" =~ / ]] && { 
		# A relative path cannot be resolved, just check existence
		[[ -e "$binname" ]] && echo "$binname" || return 1

	} || binname="$(which "$binname" 2>/dev/null)"

	# `which` failed
	[[ -n "$binname" ]] || return 1

	[[ -h "$binname" ]] && {

		local pointedname="$(ls -l "$binname"|grep -oP "$binname.+"|sed "s|$binname -> ||")"
		bincheck:path "$pointedname" ; return "$?"
	
	} || echo "$binname"
}

function action_github_checkprereqs {
	if ! bincheck:has curl; then
		out:fail "Cannot find curl -- abort"
	fi

	if ! bincheck:has jq; then
		out:fail "Cannot find jq"
	fi
}

function action_github_jsoncall {
	local uname="$1"; shift

	curl -s -u "$uname" "https://api.github.com/user/repos" -d "$*"
}

function action_githubcreate {
	# GITARGS_* -- files, arguments
	action_github_checkprereqs

	local reponame="${GITARGS_arguments[0]}"
	local username=$(askuser:ask "username")
	
	if [[ -n "${GITARGS_arguments[*]}" ]]; then
		local githubjson_res="$(action_githubcreate_newrepo "$username" "$reponame" "${GITARGS_arguments[*]:1}")"

		if [[ "$(jq_query .message "$githubjson_res")" =~ failed ]]; then
			out:fail "Could not create github repo: $(jq_query .errors "$githubjson_res")"
		fi

		action_github_setremote "$username" "$reponame"
	else
		out:fail "No repository specified"
	fi
}

function jq_query {
	local query="$1"; shift
	local stringdata="$*"

	jq "$query" <(echo "$stringdata")
}

function action_githubcreate_newrepo {
	local username="$1"; shift
	local newrepo="$1" ; shift
	local repodesc="$*"

	out:debug "User: $username ; repo: $newrepo ; Description: $repodesc"

	action_github_jsoncall "$username" "{\"name\":\"$newrepo\", \"description\":\"$repodesc\" }"

}

function action_github_setremote {
	local username="$1"; shift
	local reponame="$1"; shift

	local cloneurl="ssh://git@github.com/$username/$reponame"
	local defremote="$(action_remote_getremote "origin")"

	if [[ -z "${defremote:-}" ]]; then
		defremote="origin"
	else
		defremote="gitnauto"
	fi

	action_remote_setremote "$defremote" "$cloneurl"
}
function action_submodule {
	# GITARGS_* -- files, arguments

	local moduleurl="${GITARGS_arguments[0]}"

	gitcall submodule add "$moduleurl"
}
# Add a license to the project

GSETTING_licenses=/var/gitn/licsupport

function action_license {
	# GITARGS_* -- files, arguments
	
	case "${GITARGS_arguments[0]}" in
	list)
		ls "$GSETTING_licenses" ;;
	newfile)
		action_license_newfile "${GITARGS_arguments[@]:1}" ;;
	*)
		action_license_setlicense "${GITARGS_arguments[1]}"
		;;
	esac
}

function action_license_newfile {
	local licensename="$1"; shift
	local filename="$1"; shift

	if [[ -z "$licensename" ]]; then
		out:fail "No license specified"
	fi

	action_license_check "$licensename/head.txt" || out:fail "$licensename has no header data. Try 'gitn -license list'"

	local codefile="$(action_license_getcodefile "$filename")"
	if [[ -z "$codefile" ]]; then out:fail "No comment profile found."; fi

	readkv start "$codefile" >> "$filename"

	local midcom="$(readkv mid "$codefile")"
	cat "$GSETTING_licenses/$licensename/head.txt" | sed -r "s|^|$midcom|" >> "$filename"

	readkv end "$codefile" >> "$filename"
}

function action_license_getcodefile {
	local fext="${1##*.}"
	if [[ -z "$fext" ]]; then out:fail "Could not get extension of $1" ; fi

	local mapfile="$GSETTING_licenses/comments/mapping.conf"
	if [[ -f "$mapfile" ]]; then out:fail "Could not read mappping file"; fi

	local commentstyle="$(readkv "$fext" "$mapfile")"
	if [[ -z "$commentstyle" ]]; then out:fail "Could not determine comment style for $fext"; fi

	local commentfile="$GSETTING_licenses/comments/$commentstyle.cmt"
	if [[ ! -f "$commentstyle" ]]; then out:fail "No profile for $commentstyle"; fi

	echo "$commentstyle"
}

function action_license_setlicense {
	local licensename="$1"; shift

	action_license_check "$licensename/full.txt" || out:fail "No data for $licensename. Try 'gitn -license list'"

	cp "$GSETTING_licenses/$licensename/full.txt" LICENSE.txt
}

function action_license_check {
	local licensename="$1"; shift

	[[ ! -f "$GSETTING_licenses/$licensename" ]] 
}

function main {
	settings_load
	args_processargs "$@"

	case "$GITARGS_action" in
	status)
		action_status ;;
	commit)
		action_commit ;;
	diff)
		action_diff ;;
	push)
		action_push ;;
	pull)
		action_pull ;;
	branch)
		action_branch ;;
	remote)
		action_remote ;;
	merge)
		action_merge ;;
	update)
		action_update ;;
	stash)
		action_stash ;;
	tag)
		action_tag ;;
	release)
		action_release ;;
	log)
		action_log ;;
	blame)
		action_blame ;;
	patch)
		action_patch ;;
	github_create)
		action_githubcreate ;;
	submodule)
		action_submodule ;;
	*)
		out:fail "Action $GITARGS_action not yet available"
		;;
	esac
}

runmain gitn main "$@"
